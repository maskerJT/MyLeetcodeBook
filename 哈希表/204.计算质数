计算质数：
与其构建一个哈希表，不如构建一个最基本的数组。
每个数组的索引就代表了它的值，而其内容就用来表示它本身到底是不是一个质数。
从小的数开始，然后每个基数对应的各个倍数对应的位置都改成false:


class Solution {
public:
    int countPrimes(int n) {
        vector<bool>isPrime(n+1,true);
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime[i]){
                count++;
                for(int multi=2;multi<(n/i+1);multi++){
                    isPrime[i*multi]=false;
                }
            }
        }
        return count;
    }
};
节约内存的做法：
class Solution {
public:
    int countPrimes(int n) {
        vector<char>isPrime(n+1,1);
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime[i]){
                count++;
                for(int multi=2;multi<(n/i+1);multi++){
                    isPrime[i*multi]=0;
                }
            }
        }
        return count;
    }
};
